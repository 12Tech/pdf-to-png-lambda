service:
  name: image-converter

provider:
  name: aws
  runtime: python3.7
  memorySize: 128
  timeout: 900
  stage: ${opt:stage}
  stackName: ${self:custom.namespace}
  profile: ${self:custom.${opt:stage}.awsProfile}
  region: ${self:custom.${opt:stage}.awsRegion}
  logRetentionInDays: 14
  stackTags:
    Name: ${self:custom.namespace}
    Git: ${git:describeLight} - ${git:branch}
  environment:
    STAGE: ${opt:stage}
  # iamRoleStatements: # IAM role statements so that services can be accessed in the AWS account
  #   - Effect: 'Allow'
  #     Action:
  #       - 's3:GetObject'
  #     Resource:
  #       Fn::Join:
  #         - ''
  #         - - !GetAtt S3BucketImageconverterdevs3arrival.Arn
  #           - "/*"


plugins:
  - serverless-python-requirements
  - serverless-plugin-git-variables

layers:
  ImageMagick:
    package:
      artifact: imagemagick.zip

custom:
  pythonRequirements:
    dockerizePip: non-linux
  prefix: ${self:service.name}
  namespace: ${self:custom.prefix}-${opt:stage}

  # Stages
  dev:
    awsProfile: default
    awsRegion: us-east-1
    S3BucketArrival: ${self:custom.namespace}-s3-arrival

package:
  include:
    - handler.py
  exclude:
    - ./**

functions:
  convert:
    handler: handler.convert
    layers:
      - !Ref ImageMagickLambdaLayer
    events:
      - s3: ${self:custom.${opt:stage}.S3BucketArrival}

# you can add CloudFormation resource templates here
resources:
 Resources:
    # S3BucketArrival:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${self:custom.${opt:stage}.S3BucketArrival}

    S3BucketPolicyArrival:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:custom.${opt:stage}.S3BucketArrival}
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Action:
                - s3:GetObject
              Resource:
                Fn::Join:
                  - ''
                  - - "arn:aws:s3:::${self:custom.${opt:stage}.S3BucketArrival}"
                    - "/*"
              Principal:
                AWS:
                  - !GetAtt IamRoleLambdaExecution.Arn

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
